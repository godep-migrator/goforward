// Code generated by protoc-gen-gogo.
// source: syslogMessage.proto
// DO NOT EDIT!

/*
	Package syslogMessage is a generated protocol buffer package.

	It is generated from these files:
		syslogMessage.proto

	It has these top-level messages:
		ProtoRFC3164
*/
package syslogMessage

import proto "code.google.com/p/gogoprotobuf/proto"
import json "encoding/json"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

import io "io"
import code_google_com_p_gogoprotobuf_proto "code.google.com/p/gogoprotobuf/proto"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import fmt1 "fmt"
import strings1 "strings"
import code_google_com_p_gogoprotobuf_proto1 "code.google.com/p/gogoprotobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect1 "reflect"

import fmt2 "fmt"
import bytes "bytes"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type ProtoRFC3164 struct {
	Timestamp        *int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Hostname         *string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Tag              *string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	Content          *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Priority         *int32  `protobuf:"varint,5,opt,name=priority" json:"priority,omitempty"`
	Facility         *int32  `protobuf:"varint,6,opt,name=facility" json:"facility,omitempty"`
	Severity         *int32  `protobuf:"varint,7,opt,name=severity" json:"severity,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoRFC3164) Reset()      { *m = ProtoRFC3164{} }
func (*ProtoRFC3164) ProtoMessage() {}

func (m *ProtoRFC3164) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ProtoRFC3164) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *ProtoRFC3164) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *ProtoRFC3164) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ProtoRFC3164) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *ProtoRFC3164) GetFacility() int32 {
	if m != nil && m.Facility != nil {
		return *m.Facility
	}
	return 0
}

func (m *ProtoRFC3164) GetSeverity() int32 {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return 0
}

func init() {
}
func (m *ProtoRFC3164) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Hostname = &s
			index = postIndex
		case 3:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Tag = &s
			index = postIndex
		case 4:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Content = &s
			index = postIndex
		case 5:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 6:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Facility = &v
		case 7:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Severity = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (this *ProtoRFC3164) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtoRFC3164{`,
		`Timestamp:` + valueToStringSyslogMessage(this.Timestamp) + `,`,
		`Hostname:` + valueToStringSyslogMessage(this.Hostname) + `,`,
		`Tag:` + valueToStringSyslogMessage(this.Tag) + `,`,
		`Content:` + valueToStringSyslogMessage(this.Content) + `,`,
		`Priority:` + valueToStringSyslogMessage(this.Priority) + `,`,
		`Facility:` + valueToStringSyslogMessage(this.Facility) + `,`,
		`Severity:` + valueToStringSyslogMessage(this.Severity) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSyslogMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProtoRFC3164) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		n += 1 + sovSyslogMessage(uint64(*m.Timestamp))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovSyslogMessage(uint64(l))
	}
	if m.Tag != nil {
		l = len(*m.Tag)
		n += 1 + l + sovSyslogMessage(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovSyslogMessage(uint64(l))
	}
	if m.Priority != nil {
		n += 1 + sovSyslogMessage(uint64(uint32(*m.Priority)))
	}
	if m.Facility != nil {
		n += 1 + sovSyslogMessage(uint64(uint32(*m.Facility)))
	}
	if m.Severity != nil {
		n += 1 + sovSyslogMessage(uint64(uint32(*m.Severity)))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyslogMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyslogMessage(x uint64) (n int) {
	return sovSyslogMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedProtoRFC3164(r randySyslogMessage, easy bool) *ProtoRFC3164 {
	this := &ProtoRFC3164{}
	if r.Intn(10) != 0 {
		v1 := r.Int63()
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Timestamp = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringSyslogMessage(r)
		this.Hostname = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringSyslogMessage(r)
		this.Tag = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringSyslogMessage(r)
		this.Content = &v4
	}
	if r.Intn(10) != 0 {
		v5 := r.Int31()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.Priority = &v5
	}
	if r.Intn(10) != 0 {
		v6 := r.Int31()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.Facility = &v6
	}
	if r.Intn(10) != 0 {
		v7 := r.Int31()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.Severity = &v7
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSyslogMessage(r, 8)
	}
	return this
}

type randySyslogMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSyslogMessage(r randySyslogMessage) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringSyslogMessage(r randySyslogMessage) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneSyslogMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedSyslogMessage(r randySyslogMessage, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldSyslogMessage(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldSyslogMessage(data []byte, r randySyslogMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateSyslogMessage(data, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		data = encodeVarintPopulateSyslogMessage(data, uint64(v9))
	case 1:
		data = encodeVarintPopulateSyslogMessage(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateSyslogMessage(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateSyslogMessage(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateSyslogMessage(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateSyslogMessage(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *ProtoRFC3164) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProtoRFC3164) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		data[i] = 0x8
		i++
		i = encodeVarintSyslogMessage(data, i, uint64(*m.Timestamp))
	}
	if m.Hostname != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSyslogMessage(data, i, uint64(len(*m.Hostname)))
		i += copy(data[i:], *m.Hostname)
	}
	if m.Tag != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSyslogMessage(data, i, uint64(len(*m.Tag)))
		i += copy(data[i:], *m.Tag)
	}
	if m.Content != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSyslogMessage(data, i, uint64(len(*m.Content)))
		i += copy(data[i:], *m.Content)
	}
	if m.Priority != nil {
		data[i] = 0x28
		i++
		i = encodeVarintSyslogMessage(data, i, uint64(uint32(*m.Priority)))
	}
	if m.Facility != nil {
		data[i] = 0x30
		i++
		i = encodeVarintSyslogMessage(data, i, uint64(uint32(*m.Facility)))
	}
	if m.Severity != nil {
		data[i] = 0x38
		i++
		i = encodeVarintSyslogMessage(data, i, uint64(uint32(*m.Severity)))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func encodeFixed64SyslogMessage(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SyslogMessage(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSyslogMessage(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *ProtoRFC3164) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&syslogMessage.ProtoRFC3164{` + `Timestamp:` + valueToGoStringSyslogMessage(this.Timestamp, "int64"), `Hostname:` + valueToGoStringSyslogMessage(this.Hostname, "string"), `Tag:` + valueToGoStringSyslogMessage(this.Tag, "string"), `Content:` + valueToGoStringSyslogMessage(this.Content, "string"), `Priority:` + valueToGoStringSyslogMessage(this.Priority, "int32"), `Facility:` + valueToGoStringSyslogMessage(this.Facility, "int32"), `Severity:` + valueToGoStringSyslogMessage(this.Severity, "int32"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringSyslogMessage(v interface{}, typ string) string {
	rv := reflect1.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect1.Indirect(rv).Interface()
	return fmt1.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSyslogMessage(e map[int32]code_google_com_p_gogoprotobuf_proto1.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings1.Join(ss, ",") + "}"
	return s
}
func (this *ProtoRFC3164) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ProtoRFC3164)
	if !ok {
		return fmt2.Errorf("that is not of type *ProtoRFC3164")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *ProtoRFC3164 but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *ProtoRFC3164but is not nil && this == nil")
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return fmt2.Errorf("Timestamp this(%v) Not Equal that(%v)", *this.Timestamp, *that1.Timestamp)
		}
	} else if this.Timestamp != nil {
		return fmt2.Errorf("this.Timestamp == nil && that.Timestamp != nil")
	} else if that1.Timestamp != nil {
		return fmt2.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Hostname != nil && that1.Hostname != nil {
		if *this.Hostname != *that1.Hostname {
			return fmt2.Errorf("Hostname this(%v) Not Equal that(%v)", *this.Hostname, *that1.Hostname)
		}
	} else if this.Hostname != nil {
		return fmt2.Errorf("this.Hostname == nil && that.Hostname != nil")
	} else if that1.Hostname != nil {
		return fmt2.Errorf("Hostname this(%v) Not Equal that(%v)", this.Hostname, that1.Hostname)
	}
	if this.Tag != nil && that1.Tag != nil {
		if *this.Tag != *that1.Tag {
			return fmt2.Errorf("Tag this(%v) Not Equal that(%v)", *this.Tag, *that1.Tag)
		}
	} else if this.Tag != nil {
		return fmt2.Errorf("this.Tag == nil && that.Tag != nil")
	} else if that1.Tag != nil {
		return fmt2.Errorf("Tag this(%v) Not Equal that(%v)", this.Tag, that1.Tag)
	}
	if this.Content != nil && that1.Content != nil {
		if *this.Content != *that1.Content {
			return fmt2.Errorf("Content this(%v) Not Equal that(%v)", *this.Content, *that1.Content)
		}
	} else if this.Content != nil {
		return fmt2.Errorf("this.Content == nil && that.Content != nil")
	} else if that1.Content != nil {
		return fmt2.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if this.Priority != nil && that1.Priority != nil {
		if *this.Priority != *that1.Priority {
			return fmt2.Errorf("Priority this(%v) Not Equal that(%v)", *this.Priority, *that1.Priority)
		}
	} else if this.Priority != nil {
		return fmt2.Errorf("this.Priority == nil && that.Priority != nil")
	} else if that1.Priority != nil {
		return fmt2.Errorf("Priority this(%v) Not Equal that(%v)", this.Priority, that1.Priority)
	}
	if this.Facility != nil && that1.Facility != nil {
		if *this.Facility != *that1.Facility {
			return fmt2.Errorf("Facility this(%v) Not Equal that(%v)", *this.Facility, *that1.Facility)
		}
	} else if this.Facility != nil {
		return fmt2.Errorf("this.Facility == nil && that.Facility != nil")
	} else if that1.Facility != nil {
		return fmt2.Errorf("Facility this(%v) Not Equal that(%v)", this.Facility, that1.Facility)
	}
	if this.Severity != nil && that1.Severity != nil {
		if *this.Severity != *that1.Severity {
			return fmt2.Errorf("Severity this(%v) Not Equal that(%v)", *this.Severity, *that1.Severity)
		}
	} else if this.Severity != nil {
		return fmt2.Errorf("this.Severity == nil && that.Severity != nil")
	} else if that1.Severity != nil {
		return fmt2.Errorf("Severity this(%v) Not Equal that(%v)", this.Severity, that1.Severity)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ProtoRFC3164) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProtoRFC3164)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return false
		}
	} else if this.Timestamp != nil {
		return false
	} else if that1.Timestamp != nil {
		return false
	}
	if this.Hostname != nil && that1.Hostname != nil {
		if *this.Hostname != *that1.Hostname {
			return false
		}
	} else if this.Hostname != nil {
		return false
	} else if that1.Hostname != nil {
		return false
	}
	if this.Tag != nil && that1.Tag != nil {
		if *this.Tag != *that1.Tag {
			return false
		}
	} else if this.Tag != nil {
		return false
	} else if that1.Tag != nil {
		return false
	}
	if this.Content != nil && that1.Content != nil {
		if *this.Content != *that1.Content {
			return false
		}
	} else if this.Content != nil {
		return false
	} else if that1.Content != nil {
		return false
	}
	if this.Priority != nil && that1.Priority != nil {
		if *this.Priority != *that1.Priority {
			return false
		}
	} else if this.Priority != nil {
		return false
	} else if that1.Priority != nil {
		return false
	}
	if this.Facility != nil && that1.Facility != nil {
		if *this.Facility != *that1.Facility {
			return false
		}
	} else if this.Facility != nil {
		return false
	} else if that1.Facility != nil {
		return false
	}
	if this.Severity != nil && that1.Severity != nil {
		if *this.Severity != *that1.Severity {
			return false
		}
	} else if this.Severity != nil {
		return false
	} else if that1.Severity != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
